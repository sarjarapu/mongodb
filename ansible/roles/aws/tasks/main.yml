---
- name: check if instance name = [{{ instance_name }}] already exists
  ec2_remote_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Name": "{{ instance_name }}"
  register: instance_check

- name: print instance_check.instances.0 on create instance
  debug: msg="instance name [{{ instance_name }}] ; exists = [{{ instance_check.instances.0 is defined }}]"

- block:
  - name: if not exists already, create a new instance name = [{{ instance_name }}]
    ec2:
      key_name: "{{ security_key }}"
      region: "{{ region }}"
      zone: "{{ availability_zone }}"
      group: "{{ security_group }}"
      instance_type: "{{ instance_type }}"
      image: "{{ ami }}"
      wait: yes
      instance_tags:
        "Name": "{{ instance_name }}"
        "owner": "{{ tag_owner }}"
        "expire-on": "{{ tag_expireon }}"
        "server_group_name": "{{server_group_name}}"
        "server_number": "{{ server_number }}"
      count: 1
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 10
          delete_on_termination: true
        - device_name: /dev/xvdb
          volume_type: gp2
          volume_size: "{{ data_vol_size }}"
          delete_on_termination: false
          when: create_data_folder == True
        - device_name: /dev/xvdf
          volume_type: gp2
          volume_size: 4
          delete_on_termination: false
          when: create_data_folder == True
    register: create_output

  - name: add the [rs_servers] to [{{ server_group_name }}] inventory file
    lineinfile:
      dest: "inventories/{{server_group_name}}"
      line: "[rs_servers]"
      state: present
      create: True

  - name: add the {{ create_output.instances.0.public_dns_name }} to [{{ server_group_name }}] group in hosts file
    lineinfile:
      dest: "inventories/{{server_group_name}}"
      regexp: "^{{ create_output.instances.0.public_dns_name }}"
      insertafter: "rs_servers"
      line: "{{ create_output.instances.0.public_dns_name }}"
      state: present
      create: True

  - name: get the instance volumes
    ec2_vol:
      region: "{{ region }}"
      instance: "{{ create_output.instances.0.id }}"
      state: list
    register: volumes_output

  - name: set the tags for the instance volumes
    ec2_tag:
      region: "{{ region }}" 
      resource: "{{ item.id }}"
      tags:
        "Name": "{{ instance_name }}-{{ item.attachment_set.device }}"
        "owner": "{{ tag_owner }}"
        "expire-on": "{{ tag_expireon }}"
        "server_group_name": "{{server_group_name}}"
        "instance_name": "{{ instance_name }}"
        "server_number": "{{ server_number }}"
        "device": "{{ item.attachment_set.device }}"
    with_items: "{{ volumes_output.volumes }}"
  when: instance_check.instances.0 is undefined